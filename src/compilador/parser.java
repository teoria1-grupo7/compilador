
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 30 13:09:30 ART 2023
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import compilador.SymbolTableEntry;
import helper.ParserHelper;
import ast.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 30 13:09:30 ART 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\005\004\000\002\005\003" +
    "\000\002\006\005\000\002\007\007\000\002\007\007\000" +
    "\002\004\005\000\002\011\004\000\002\011\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\020\005\000\002\020\003\000\002\020\005\000\002" +
    "\021\005\000\002\021\003\000\002\021\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\014\003\000\002\014\003\000\002\031" +
    "\007\000\002\033\007\000\002\033\010\000\002\034\006" +
    "\000\002\032\005\000\002\032\003\000\002\025\011\000" +
    "\002\025\011\000\002\025\003\000\002\026\006\000\002" +
    "\026\003\000\002\027\005\000\002\024\003\000\002\017" +
    "\004\000\002\035\006\000\002\036\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\004\010\006\004\001\002\000\004\024" +
    "\151\001\002\000\004\002\146\001\002\000\004\004\010" +
    "\001\002\000\004\002\uffff\001\002\000\012\013\012\014" +
    "\017\016\021\052\023\001\002\000\016\005\ufff0\013\ufff0" +
    "\014\ufff0\016\ufff0\023\ufff0\052\ufff0\001\002\000\006\017" +
    "\056\020\061\001\002\000\016\005\ufff6\013\ufff6\014\ufff6" +
    "\016\ufff6\023\ufff6\052\ufff6\001\002\000\016\005\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\023\ufff2\052\ufff2\001\002\000\016" +
    "\005\uffef\013\uffef\014\uffef\016\uffef\023\uffef\052\uffef\001" +
    "\002\000\016\005\uffda\013\uffda\014\uffda\016\uffda\023\uffda" +
    "\052\uffda\001\002\000\006\017\056\020\061\001\002\000" +
    "\014\005\055\013\012\014\017\016\021\052\023\001\002" +
    "\000\004\047\032\001\002\000\016\005\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\023\ufff1\052\ufff1\001\002\000\004\042\026" +
    "\001\002\000\016\005\uffee\013\uffee\014\uffee\016\uffee\023" +
    "\uffee\052\uffee\001\002\000\016\005\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\023\uffd9\052\uffd9\001\002\000\014\020\037\047" +
    "\032\050\040\051\033\052\036\001\002\000\044\005\uffe4" +
    "\013\uffe4\014\uffe4\016\uffe4\021\uffe4\023\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\052\uffe4\001\002\000\016\005\uffec\013" +
    "\uffec\014\uffec\016\uffec\023\uffec\052\uffec\001\002\000\044" +
    "\005\uffea\013\uffea\014\uffea\016\uffea\021\uffea\023\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\043\uffea" +
    "\044\uffea\045\046\046\047\052\uffea\001\002\000\016\005" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\023\uffcc\052\uffcc\001\002" +
    "\000\050\005\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\052" +
    "\uffe1\001\002\000\022\005\uffed\013\uffed\014\uffed\016\uffed" +
    "\023\uffed\043\043\044\044\052\uffed\001\002\000\044\005" +
    "\uffe7\013\uffe7\014\uffe7\016\uffe7\021\uffe7\023\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\052\uffe7\001\002\000\044\005\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\021\uffe5\023\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\052\uffe5\001\002\000\012\020\037\050" +
    "\040\051\033\052\036\001\002\000\050\005\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\021\uffe2\023\uffe2\025\uffe2\026\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\052\uffe2\001\002\000\010\021" +
    "\042\043\043\044\044\001\002\000\044\005\uffe3\013\uffe3" +
    "\014\uffe3\016\uffe3\021\uffe3\023\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\052\uffe3\001\002\000\012\020\037\050\040\051" +
    "\033\052\036\001\002\000\012\020\037\050\040\051\033" +
    "\052\036\001\002\000\044\005\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\021\uffe9\023\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\043\uffe9\044\uffe9\045\046\046\047\052" +
    "\uffe9\001\002\000\012\020\037\050\040\051\033\052\036" +
    "\001\002\000\012\020\037\050\040\051\033\052\036\001" +
    "\002\000\044\005\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6" +
    "\023\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\052\uffe6\001\002" +
    "\000\044\005\uffe8\013\uffe8\014\uffe8\016\uffe8\021\uffe8\023" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\052\uffe8\001\002\000" +
    "\044\005\uffeb\013\uffeb\014\uffeb\016\uffeb\021\uffeb\023\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\043" +
    "\uffeb\044\uffeb\045\046\046\047\052\uffeb\001\002\000\016" +
    "\005\uffcb\013\uffcb\014\uffcb\016\uffcb\023\uffcb\052\uffcb\001" +
    "\002\000\016\005\ufff7\013\ufff7\014\ufff7\016\ufff7\023\ufff7" +
    "\052\ufff7\001\002\000\004\002\ufff8\001\002\000\004\020" +
    "\127\001\002\000\004\022\uffd3\001\002\000\004\022\117" +
    "\001\002\000\014\020\067\040\065\050\040\051\033\052" +
    "\036\001\002\000\004\021\uffd0\001\002\000\004\021\uffce" +
    "\001\002\000\022\032\100\033\077\034\072\035\074\036" +
    "\073\037\075\043\043\044\044\001\002\000\004\020\114" +
    "\001\002\000\004\021\113\001\002\000\014\020\037\040" +
    "\065\050\040\051\033\052\036\001\002\000\004\021\102" +
    "\001\002\000\024\021\042\032\100\033\077\034\072\035" +
    "\074\036\073\037\075\043\043\044\044\001\002\000\012" +
    "\020\uffde\050\uffde\051\uffde\052\uffde\001\002\000\012\020" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\012\020\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\001\002\000\012\020\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\001\002\000\012\020\037\050\040" +
    "\051\033\052\036\001\002\000\012\020\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\001\002\000\012\020\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\001\002\000\010\021\uffcd\043\043\044\044\001" +
    "\002\000\006\030\103\031\104\001\002\000\004\020\110" +
    "\001\002\000\004\020\105\001\002\000\014\020\037\040" +
    "\065\050\040\051\033\052\036\001\002\000\004\021\107" +
    "\001\002\000\004\021\uffd2\001\002\000\014\020\037\040" +
    "\065\050\040\051\033\052\036\001\002\000\004\021\112" +
    "\001\002\000\004\021\uffd1\001\002\000\004\022\uffd4\001" +
    "\002\000\012\020\037\050\040\051\033\052\036\001\002" +
    "\000\004\021\116\001\002\000\004\021\uffcf\001\002\000" +
    "\012\013\012\014\017\016\021\052\023\001\002\000\014" +
    "\013\012\014\017\016\021\023\121\052\023\001\002\000" +
    "\020\005\uffd7\013\uffd7\014\uffd7\015\122\016\uffd7\023\uffd7" +
    "\052\uffd7\001\002\000\004\022\124\001\002\000\016\005" +
    "\uffd6\013\uffd6\014\uffd6\016\uffd6\023\uffd6\052\uffd6\001\002" +
    "\000\012\013\012\014\017\016\021\052\023\001\002\000" +
    "\014\013\012\014\017\016\021\023\126\052\023\001\002" +
    "\000\016\005\uffd5\013\uffd5\014\uffd5\016\uffd5\023\uffd5\052" +
    "\uffd5\001\002\000\004\052\131\001\002\000\004\021\140" +
    "\001\002\000\004\027\132\001\002\000\004\024\133\001" +
    "\002\000\006\050\040\051\033\001\002\000\004\026\135" +
    "\001\002\000\006\050\040\051\033\001\002\000\004\025" +
    "\137\001\002\000\004\021\uffc9\001\002\000\004\022\uffca" +
    "\001\002\000\004\022\142\001\002\000\012\013\012\014" +
    "\017\016\021\052\023\001\002\000\014\013\012\014\017" +
    "\016\021\023\144\052\023\001\002\000\016\005\uffd8\013" +
    "\uffd8\014\uffd8\016\uffd8\023\uffd8\052\uffd8\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\006\007" +
    "\170\024\151\001\002\000\006\007\ufffc\024\ufffc\001\002" +
    "\000\004\052\153\001\002\000\004\025\167\001\002\000" +
    "\006\025\155\027\154\001\002\000\004\052\153\001\002" +
    "\000\004\041\156\001\002\000\004\024\157\001\002\000" +
    "\010\010\163\011\162\012\160\001\002\000\006\025\ufff3" +
    "\027\ufff3\001\002\000\006\025\ufffa\027\ufffa\001\002\000" +
    "\006\025\ufff4\027\ufff4\001\002\000\006\025\ufff5\027\ufff5" +
    "\001\002\000\004\027\165\001\002\000\010\010\163\011" +
    "\162\012\160\001\002\000\006\025\ufff9\027\ufff9\001\002" +
    "\000\006\007\ufffb\024\ufffb\001\002\000\004\004\ufffe\001" +
    "\002\000\006\007\ufffd\024\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\004\003\005\004\006\001\001\000" +
    "\006\005\146\006\147\001\001\000\002\001\001\000\004" +
    "\004\144\001\001\000\002\001\001\000\024\011\017\012" +
    "\012\013\013\014\021\015\010\016\014\017\023\031\015" +
    "\033\024\001\001\000\002\001\001\000\006\032\140\035" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\057\035\056\001" +
    "\001\000\022\012\053\013\013\014\021\015\010\016\014" +
    "\017\023\031\015\033\024\001\001\000\004\024\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\033\021\030\022\034\023" +
    "\026\024\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\040\021\030\022\034\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\051" +
    "\022\034\023\026\001\001\000\010\021\044\022\034\023" +
    "\026\001\001\000\002\001\001\000\006\022\050\023\026" +
    "\001\001\000\006\022\047\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\063\021\030" +
    "\022\034\023\026\025\065\026\061\027\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\070\021" +
    "\030\022\034\023\026\026\067\027\062\001\001\000\002" +
    "\001\001\000\004\030\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\100\021\030\022\034\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\063\021" +
    "\030\022\034\023\026\026\105\027\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\063\021\030\022" +
    "\034\023\026\026\110\027\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\063\021" +
    "\030\022\034\023\026\027\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\117\012\012\013\013\014" +
    "\021\015\010\016\014\017\023\031\015\033\024\001\001" +
    "\000\022\012\053\013\013\014\021\015\010\016\014\017" +
    "\023\031\015\033\024\001\001\000\004\034\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\124\012" +
    "\012\013\013\014\021\015\010\016\014\017\023\031\015" +
    "\033\024\001\001\000\022\012\053\013\013\014\021\015" +
    "\010\016\014\017\023\031\015\033\024\001\001\000\002" +
    "\001\001\000\004\036\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\133\001\001" +
    "\000\002\001\001\000\004\023\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\142\012\012\013\013\014\021\015\010\016" +
    "\014\017\023\031\015\033\024\001\001\000\022\012\053" +
    "\013\013\014\021\015\010\016\014\017\023\031\015\033" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\170\001\001\000\002\001\001\000" +
    "\004\007\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public ParserHelper helper = new ParserHelper((Lexico) super.getScanner());

  public void report_error(String message, Object info) {
     StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append("("+info.toString()+")");

    m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



    public List<NodoSentencia> a ;

    public void varDef(String id) {
        parser.helper.varDef(id);
    }

    public void loadVarsAndTypes() {
        parser.helper.loadVarsAndTypes();
    }

    public void addCteInt(Number cte){
        parser.helper.addCteInt(cte);
    }

    public void addCteFloat(Number cte){
        parser.helper.addCteFloat(cte);
    }

    public void addCteString(String cte){
        parser.helper.addCteString(cte);
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_between ::= IDENTIFIER COMMA LBRACK constante_numerica SEMICOLON constante_numerica RBRACK 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int infleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int supleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[parametros_between01] "+inf+", "+sup);

        RESULT = new NodoAnd(new NodoMayorIgual(new NodoIdentificador(var), (NodoExpresion)inf), new NodoMenorIgual(new NodoIdentificador(var), (NodoExpresion)sup));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_between",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion_between ::= BETWEEN LPAREN parametros_between RPAREN 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[funcion_between01] BETWEEN LPAREN "+param+" RPAREN");

        RESULT = param;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_between",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion_print ::= PRINT constante_string 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[funcion_print01] PRINT \""+cadena+"\"");

        RESULT = new NodoPrint((NodoConstanteString) cadena);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_print",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante_string ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int cte_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String cte_string = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        addCteString(cte_string);
        System.out.println("[constante_string01] \""+cte_string+"\"");

        RESULT = new NodoConstanteString(cte_string);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_string",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor_booleano ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("[factor_booleano01] Factor booleano: " + e1 + " " + op + " " + e2);

                        RESULT = new NodoComparacionFactory().from((String) op, (NodoExpresion) e1, (NodoExpresion) e2);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_booleano",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino_booleano ::= factor_booleano 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("[termino_booleano02] Término booleano: "+f);
                        RESULT = (NodoExpresionBooleana) f;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_booleano",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino_booleano ::= NOT LPAREN factor_booleano RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       System.out.println("[termino_booleano01] Término booleano: NOT "+f);

                       RESULT = new NodoNot((NodoExpresionBooleana) f);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_booleano",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_booleana ::= termino_booleano 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           System.out.println("[expresion_booleana03] Expresión: "+t);
                           RESULT = (NodoExpresionBooleana) t;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_booleana ::= LPAREN termino_booleano RPAREN AND LPAREN termino_booleano RPAREN 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                           System.out.println("[expresion_booleana02] Expresión: LPAREN "+t1+" AND "+t2+" RPAREN");

                           RESULT = new NodoAnd((NodoExpresionBooleana) t1, (NodoExpresionBooleana) t2);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_booleana ::= LPAREN termino_booleano RPAREN OR LPAREN termino_booleano RPAREN 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                           System.out.println("[expresion_booleana01] Expresión: LPAREN "+t1+" OR "+t2+" RPAREN");

                           RESULT = new NodoOr((NodoExpresionBooleana)t1, (NodoExpresionBooleana) t2);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= funcion_between 
            {
              Object RESULT =null;
		int betleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int betright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[condicion02] "+bet);
        RESULT = (NodoExpresionBooleana) bet;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= LPAREN expresion_booleana RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[condicion01] LPAREN "+expr+" RPAREN");

        RESULT = (NodoExpresionBooleana) expr;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicional_else ::= ELSE LBRACE bloque_sentencias RBRACE 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[condicional_if03] ELSE LBRACE <bloque_sentencias> RBRACE");

        RESULT = ss;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicional_if ::= IF condicion LBRACE bloque_sentencias RBRACE condicional_else 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int celseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int celseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object celse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[condicional_if02] IF "+con+" LBRACE <bloque_sentencias> RBRACE "+celse);

        RESULT = new NodoIf((NodoExpresionBooleana) con, (List<NodoSentencia>) ss, (List<NodoSentencia>) celse);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional_if ::= IF condicion LBRACE bloque_sentencias RBRACE 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[condicional_if01] IF "+con+" LBRACE <bloque_sentencias> RBRACE");

        RESULT = new NodoIf((NodoExpresionBooleana) con, (List<NodoSentencia>) ss, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ciclo_while ::= WHILE condicion LBRACE bloque_sentencias RBRACE 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[ciclo_while01] WHILE "+con+" LBRACE <bloque_sentencias> RBRACE");

        RESULT = new NodoCiclo((NodoExpresionBooleana) con, (List<NodoSentencia>) ss);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estructura ::= condicional_if 
            {
              Object RESULT =null;
		int condifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object condif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[estructura02] "+condif);
        RESULT = condif;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estructura ::= ciclo_while 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[estructura01] "+mientras);
        RESULT = mientras;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacional ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacional ::= GTEQ 
            {
              Object RESULT =null;
		int gteqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gteqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gteq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gteq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_relacional ::= NOTEQ 
            {
              Object RESULT =null;
		int noteqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noteqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object noteq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = noteq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operador_relacional ::= EQEQ 
            {
              Object RESULT =null;
		int eqeqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqeqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eqeq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = eqeq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_relacional ::= LTEQ 
            {
              Object RESULT =null;
		int lteqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lteqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lteq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lteq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador_relacional ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constante_numerica ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;
		int cte_floatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_floatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number cte_float = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        addCteFloat(cte_float);
        System.out.println("[constante_numerica02] Número real: "+cte_float);

        RESULT = new NodoConstanteFloat(cte_float);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_numerica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constante_numerica ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int cte_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number cte_int = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        addCteInt(cte_int);
        System.out.println("[constante_numerica01] Número entero: "+cte_int);

        RESULT = new NodoConstanteInt(cte_int);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_numerica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[factor03] Factor: LPAREN "+ex+" RPAREN");

        RESULT = (NodoExpresion) ex;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= constante_numerica 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[factor02] Factor: "+num);
        RESULT = num;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[factor01] Factor: identificador "+id);
        RESULT = new NodoIdentificador(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= termino DIV factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[termino03] Término: "+t+" DIV "+f);

        RESULT = new NodoDivision((NodoExpresion) t, (NodoExpresion) f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[termino02] Término: "+f);
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= termino MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[termino01] Término: "+t+" MULT "+f);

        RESULT = new NodoMultiplicacion((NodoExpresion) t, (NodoExpresion) f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MINUS termino 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[expresion03] Expresión: "+ex+" MINUS "+t);

        RESULT = new NodoResta((NodoExpresion) ex, (NodoExpresion) t);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[expresion02] Expresión: "+t);
        RESULT = (NodoExpresion) t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion PLUS termino 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[expresion01] Expresión: "+ex+" PLUS "+t);

        RESULT = new NodoSuma((NodoExpresion) ex, (NodoExpresion) t);

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= IDENTIFIER ASSIGN constante_string 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cte_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cte_string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[asignacion02] Asignación: "+id+" ASSIGN \""+cte_string+"\"");

        RESULT = new NodoAsignacion(new NodoIdentificador(id), (NodoExpresion) cte_string);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= IDENTIFIER ASSIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[asignacion01] Asignación: "+id+" ASSIGN "+ex);

        RESULT = new NodoAsignacion(new NodoIdentificador(id), (NodoExpresion) ex);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elemento_sentencia_simple ::= funcion_print 
            {
              Object RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object print = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[elemento_sentencia_simple02] "+print);
        RESULT = print;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_sentencia_simple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elemento_sentencia_simple ::= asignacion 
            {
              Object RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[elemento_sentencia_simple01] "+assign);
        RESULT = assign;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_sentencia_simple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_simple ::= elemento_sentencia_simple 
            {
              Object RESULT =null;
		int essleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int essright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ess = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[sentencia_simple01] ");
        RESULT = ess;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= estructura 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[sentencia02] Bloque de sentencias ");
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_simple 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[sentencia01] Sentencia simple ("+ss+")");
        RESULT = ss;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_de_dato ::= STRING 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.helper.typeDef(sym.STRING);
        System.out.println("[tipo_de_dato03] Tipo: "+cadena);
        RESULT = cadena;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_de_dato ::= FLOAT 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.helper.typeDef(sym.FLOAT);
        System.out.println("[tipo_de_dato02] Tipo: "+real);
        RESULT = real;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_de_dato ::= INT 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.helper.typeDef(sym.INT);
        System.out.println("[tipo_de_dato01] Tipo: "+entero);
        RESULT = entero;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_sentencias ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[bloque_sentencias02] ");
        a = new ArrayList<>();
        a.add((NodoSentencia) s);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_sentencias ::= bloque_sentencias sentencia 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[bloque_sentencias01] ");
        ((List<NodoSentencia>)ss).add((NodoSentencia)s);
        RESULT = ss;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccion_programa ::= BEGINPROGRAM bloque_sentencias ENDPROGRAM 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("[seccion_programa01] Fin del código del programa");
        RESULT = new NodoPrograma((List<NodoSentencia>) ss);

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_def_var ::= IDENTIFIER COMMA inner_def_var COMMA tipo_de_dato 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int innerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object inner = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[inner_def_var02] Variable: "+id);
        varDef(id);
        RESULT = id+" COMMA "+inner+" COMMA "+tipo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_def_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inner_def_var ::= IDENTIFIER RBRACK VARASSIGN LBRACK tipo_de_dato 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[inner_def_var01] Variable: "+id);
        varDef(id);
        RESULT = id+" RBRACK VARASSIGN LBRACK "+tipo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_def_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicion_variables ::= LBRACK inner_def_var RBRACK 
            {
              Object RESULT =null;
		int innerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inner = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        loadVarsAndTypes();
        System.out.println("[definicion_variables01] LBRACK "+inner+" RBRACK");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // conjunto_variables ::= definicion_variables 
            {
              Object RESULT =null;
		
        System.out.println("[conjunto_variables02] ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // conjunto_variables ::= conjunto_variables definicion_variables 
            {
              Object RESULT =null;
		
        System.out.println("[conjunto_variables01] ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_definicion_variables ::= DECLARE conjunto_variables ENDDECLARE 
            {
              Object RESULT =null;
		
        System.out.println("[seccion_definicion_variables01] Fin de la declaración de variables");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_definicion_variables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo_fuente ::= seccion_programa 
            {
              Object RESULT =null;
		int pgmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pgmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pgm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[codigo_fuente02] Compilación exitosa de programa simple");
        RESULT = pgm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_fuente",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo_fuente ::= seccion_definicion_variables seccion_programa 
            {
              Object RESULT =null;
		int pgmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pgmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pgm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("[codigo_fuente01] Compilación exitosa de programa con variables");
        RESULT = pgm;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_fuente",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo_fuente EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

