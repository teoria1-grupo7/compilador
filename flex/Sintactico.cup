package compilador;
import java_cup.runtime.Symbol;
import compilador.SymbolTableEntry;
import helper.ParserHelper;
import ast.*;

import java.util.ArrayList;
import java.util.List;

parser code {:

  public ParserHelper helper = new ParserHelper((Lexico) super.getScanner());

  public void report_error(String message, Object info) {
     StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append("("+info.toString()+")");

    m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};


action code {:

    public List<NodoSentencia> a ;

    public void varDef(String id) {
        parser.helper.varDef(id);
    }

    public void loadVarsAndTypes() {
        parser.helper.loadVarsAndTypes();
    }

    public void addCteInt(Number cte){
        parser.helper.addCteInt(cte);
    }

    public void addCteFloat(Number cte){
        parser.helper.addCteFloat(cte);
    }

    public void addCteString(String cte){
        parser.helper.addCteString(cte);
    }
:};

terminal BEGINPROGRAM;
terminal ENDPROGRAM;
terminal DECLARE;
terminal ENDDECLARE;
terminal INT;
terminal FLOAT;
terminal STRING;

terminal WHILE;
terminal IF, ELSE;
terminal PRINT;
terminal BETWEEN;

terminal LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACK, RBRACK;
terminal SEMICOLON, COMMA;

terminal AND;
terminal OR;
terminal LT, LTEQ;
terminal EQEQ, NOTEQ;
terminal GTEQ, GT;
terminal NOT;
terminal VARASSIGN;
terminal ASSIGN;
terminal PLUS, MINUS, MULT, DIV;

terminal java.lang.String STRING_LITERAL;
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.String IDENTIFIER;

non terminal
    codigo_fuente,
    seccion_definicion_variables,
    seccion_programa,
    conjunto_variables,
    definicion_variables,
    inner_def_var,
    tipo_de_dato,
    bloque_sentencias,
    sentencia,
    sentencia_simple,
    estructura,
    elemento_sentencia_simple,
    asignacion,
    funcion_print,
    expresion,
    termino,
    factor,
    constante_numerica,
    constante_string,
    expresion_booleana,
    termino_booleano,
    factor_booleano,
    operador_relacional,
    ciclo_while,
    condicion,
    condicional_if,
    condicional_else,
    funcion_between,
    parametros_between;

start with codigo_fuente;

codigo_fuente ::=
    seccion_definicion_variables seccion_programa:pgm {:
        System.out.println("[codigo_fuente01] Compilación exitosa de programa con variables");
        RESULT = pgm;
    :}
    | seccion_programa:pgm {:
        System.out.println("[codigo_fuente02] Compilación exitosa de programa simple");
        RESULT = pgm;
    :};


seccion_definicion_variables ::=
    DECLARE conjunto_variables ENDDECLARE {:
        System.out.println("[seccion_definicion_variables01] Fin de la declaración de variables");
    :};

conjunto_variables ::=
    conjunto_variables definicion_variables {:
        System.out.println("[conjunto_variables01] ");
    :}
    | definicion_variables {:
        System.out.println("[conjunto_variables02] ");
    :};

definicion_variables ::= LBRACK inner_def_var:inner RBRACK {:
        loadVarsAndTypes();
        System.out.println("[definicion_variables01] LBRACK "+inner+" RBRACK");
    :};

inner_def_var ::=
    IDENTIFIER:id RBRACK VARASSIGN LBRACK tipo_de_dato:tipo {:
        System.out.println("[inner_def_var01] Variable: "+id);
        varDef(id);
        RESULT = id+" RBRACK VARASSIGN LBRACK "+tipo;
    :};
inner_def_var ::=
    IDENTIFIER:id COMMA inner_def_var:inner COMMA tipo_de_dato:tipo {:
        System.out.println("[inner_def_var02] Variable: "+id);
        varDef(id);
        RESULT = id+" COMMA "+inner+" COMMA "+tipo;
    :};


seccion_programa ::=
    BEGINPROGRAM bloque_sentencias:ss ENDPROGRAM{:
        System.out.println("[seccion_programa01] Fin del código del programa");
        RESULT = new NodoPrograma((List<NodoSentencia>) ss);

    :};

bloque_sentencias ::=
    bloque_sentencias:ss sentencia:s {:
        System.out.println("[bloque_sentencias01] ");
        ((List<NodoSentencia>)ss).add((NodoSentencia)s);
        RESULT = ss;
    :}
    | sentencia:s {:
        System.out.println("[bloque_sentencias02] ");
        a = new ArrayList<>();
        a.add((NodoSentencia) s);
        RESULT = a;
    :};

tipo_de_dato ::=
    INT:entero {:
        parser.helper.typeDef(sym.INT);
        System.out.println("[tipo_de_dato01] Tipo: "+entero);
        RESULT = entero;
        :}
    | FLOAT:real {:
        parser.helper.typeDef(sym.FLOAT);
        System.out.println("[tipo_de_dato02] Tipo: "+real);
        RESULT = real;
    :}
    | STRING:cadena {:
        parser.helper.typeDef(sym.STRING);
        System.out.println("[tipo_de_dato03] Tipo: "+cadena);
        RESULT = cadena;
    :};


sentencia ::=
    sentencia_simple:ss {:
        System.out.println("[sentencia01] Sentencia simple ("+ss+")");
        RESULT = ss;
    :}
    | estructura:e {:
        System.out.println("[sentencia02] Bloque de sentencias ");
        RESULT = e;
    :};

sentencia_simple ::=
    elemento_sentencia_simple:ess {:
        System.out.println("[sentencia_simple01] ");
        RESULT = ess;
    :};

elemento_sentencia_simple ::=
    asignacion:assign {:
        System.out.println("[elemento_sentencia_simple01] "+assign);
        RESULT = assign;
    :}
    | funcion_print:print {:
        System.out.println("[elemento_sentencia_simple02] "+print);
        RESULT = print;
    :};

asignacion ::=
    IDENTIFIER:id ASSIGN expresion:ex {:
        System.out.println("[asignacion01] Asignación: "+id+" ASSIGN "+ex);

        RESULT = new NodoAsignacion(new NodoIdentificador(id), (NodoExpresion) ex);
    :}
    | IDENTIFIER:id ASSIGN constante_string:cte_string {:
        System.out.println("[asignacion02] Asignación: "+id+" ASSIGN \""+cte_string+"\"");

        RESULT = new NodoAsignacion(new NodoIdentificador(id), (NodoExpresion) cte_string);
    :};

expresion ::=
    expresion:ex PLUS termino:t {:
        System.out.println("[expresion01] Expresión: "+ex+" PLUS "+t);

        RESULT = new NodoSuma((NodoExpresion) ex, (NodoExpresion) t);

    :}
    | termino:t {:
        System.out.println("[expresion02] Expresión: "+t);
        RESULT = (NodoExpresion) t;
    :};
expresion ::=
    expresion:ex MINUS termino:t {:
        System.out.println("[expresion03] Expresión: "+ex+" MINUS "+t);

        RESULT = new NodoResta((NodoExpresion) ex, (NodoExpresion) t);
    :};

termino ::=
    termino:t MULT factor:f {:
        System.out.println("[termino01] Término: "+t+" MULT "+f);

        RESULT = new NodoMultiplicacion((NodoExpresion) t, (NodoExpresion) f);
    :}
    | factor:f {:
        System.out.println("[termino02] Término: "+f);
        RESULT = f;
    :};
termino ::=
    termino:t DIV factor:f {:
        System.out.println("[termino03] Término: "+t+" DIV "+f);

        RESULT = new NodoDivision((NodoExpresion) t, (NodoExpresion) f);
    :};

factor ::=
    IDENTIFIER:id {:
        System.out.println("[factor01] Factor: identificador "+id);
        RESULT = new NodoIdentificador(id);
    :}
    | constante_numerica:num {:
        System.out.println("[factor02] Factor: "+num);
        RESULT = num;
    :}
    | LPAREN expresion:ex RPAREN {:
        System.out.println("[factor03] Factor: LPAREN "+ex+" RPAREN");

        RESULT = (NodoExpresion) ex;
    :};

constante_numerica ::=
    INTEGER_LITERAL:cte_int {:
        addCteInt(cte_int);
        System.out.println("[constante_numerica01] Número entero: "+cte_int);

        RESULT = new NodoConstanteInt(cte_int);
    :}
    | FLOATING_POINT_LITERAL:cte_float {:
        addCteFloat(cte_float);
        System.out.println("[constante_numerica02] Número real: "+cte_float);

        RESULT = new NodoConstanteFloat(cte_float);
    :};

operador_relacional ::=
    LT:lt {: RESULT = lt; :}
    | LTEQ:lteq {: RESULT = lteq; :}
    | EQEQ:eqeq {: RESULT = eqeq; :}
    | NOTEQ:noteq {: RESULT = noteq; :}
    | GTEQ:gteq {: RESULT = gteq; :}
    | GT:gt {: RESULT = gt; :};


estructura ::=
    ciclo_while:mientras {:
        System.out.println("[estructura01] "+mientras);
        RESULT = mientras;
    :}
    | condicional_if:condif {:
        System.out.println("[estructura02] "+condif);
        RESULT = condif;
    :};


ciclo_while ::=
    WHILE condicion:con LBRACE bloque_sentencias:ss RBRACE {:
        System.out.println("[ciclo_while01] WHILE "+con+" LBRACE <bloque_sentencias> RBRACE");

        RESULT = new NodoCiclo((NodoExpresionBooleana) con, (List<NodoSentencia>) ss);
    :};


condicional_if ::=
    IF condicion:con LBRACE bloque_sentencias:ss RBRACE {:
        System.out.println("[condicional_if01] IF "+con+" LBRACE <bloque_sentencias> RBRACE");

        RESULT = new NodoIf((NodoExpresionBooleana) con, (List<NodoSentencia>) ss, null);
    :};
condicional_if ::=
    IF condicion:con LBRACE bloque_sentencias:ss RBRACE condicional_else:celse {:
        System.out.println("[condicional_if02] IF "+con+" LBRACE <bloque_sentencias> RBRACE "+celse);

        RESULT = new NodoIf((NodoExpresionBooleana) con, (List<NodoSentencia>) ss, (List<NodoSentencia>) celse);
    :};
condicional_else ::=
    ELSE LBRACE bloque_sentencias:ss RBRACE {:
        System.out.println("[condicional_if03] ELSE LBRACE <bloque_sentencias> RBRACE");

        RESULT = ss;
    :};


condicion ::=
    LPAREN expresion_booleana:expr RPAREN {:
        System.out.println("[condicion01] LPAREN "+expr+" RPAREN");

        RESULT = (NodoExpresionBooleana) expr;
    :}
    | funcion_between:bet {:
        System.out.println("[condicion02] "+bet);
        RESULT = (NodoExpresionBooleana) bet;
    :};

expresion_booleana ::= LPAREN termino_booleano:t1 RPAREN OR LPAREN termino_booleano:t2 RPAREN {:
                           System.out.println("[expresion_booleana01] Expresión: LPAREN "+t1+" OR "+t2+" RPAREN");

                           RESULT = new NodoOr((NodoExpresionBooleana)t1, (NodoExpresionBooleana) t2);
                       :}
                        | LPAREN termino_booleano:t1 RPAREN AND LPAREN termino_booleano:t2 RPAREN {:
                           System.out.println("[expresion_booleana02] Expresión: LPAREN "+t1+" AND "+t2+" RPAREN");

                           RESULT = new NodoAnd((NodoExpresionBooleana) t1, (NodoExpresionBooleana) t2);
                       :}
                        | termino_booleano:t {:
                           System.out.println("[expresion_booleana03] Expresión: "+t);
                           RESULT = (NodoExpresionBooleana) t;
                        :} ;

termino_booleano ::= NOT LPAREN factor_booleano:f RPAREN {:
                       System.out.println("[termino_booleano01] Término booleano: NOT "+f);

                       RESULT = new NodoNot((NodoExpresionBooleana) f);
                   :}
                        | factor_booleano:f {:
                        System.out.println("[termino_booleano02] Término booleano: "+f);
                        RESULT = (NodoExpresionBooleana) f;
                   :};

factor_booleano ::= expresion:e1 operador_relacional:op expresion:e2 {:
                        System.out.println("[factor_booleano01] Factor booleano: " + e1 + " " + op + " " + e2);

                        RESULT = new NodoComparacionFactory().from((String) op, (NodoExpresion) e1, (NodoExpresion) e2);
                    :};


constante_string ::=
    STRING_LITERAL:cte_string {:
        addCteString(cte_string);
        System.out.println("[constante_string01] \""+cte_string+"\"");

        RESULT = new NodoConstanteString(cte_string);
    :};

funcion_print ::=
    PRINT constante_string:cadena {:
        System.out.println("[funcion_print01] PRINT \""+cadena+"\"");

        RESULT = new NodoPrint((NodoConstanteString) cadena);
    :};

funcion_between ::= BETWEEN
    LPAREN parametros_between:param RPAREN {:
        System.out.println("[funcion_between01] BETWEEN LPAREN "+param+" RPAREN");

        RESULT = param;
    :};

parametros_between ::=
    IDENTIFIER:var COMMA LBRACK constante_numerica:inf SEMICOLON constante_numerica:sup RBRACK {:
        System.out.println("[parametros_between01] "+inf+", "+sup);

        RESULT = new NodoAnd(new NodoMayorIgual(new NodoIdentificador(var), (NodoExpresion)inf), new NodoMenorIgual(new NodoIdentificador(var), (NodoExpresion)sup));
    :};
