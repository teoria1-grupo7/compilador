package compilador;
import java_cup.runtime.Symbol;
import compilador.SymbolTableEntry;
import helper.ParserHelper;

parser code {:

  public ParserHelper helper = new ParserHelper((Lexico) super.getScanner());

  public void report_error(String message, Object info) {
     StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append("("+info.toString()+")");

    m.append(" : " + message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

terminal BEGINPROGRAM;
terminal ENDPROGRAM;
terminal DECLARE;
terminal ENDDECLARE;
terminal INT;
terminal FLOAT;
terminal STRING;

terminal WHILE;
terminal IF, ELSE;
terminal PRINT;
terminal BETWEEN;

terminal LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACK, RBRACK;
terminal SEMICOLON, COMMA;

terminal AND; // conditional_and_expression
terminal OR; // conditional_or_expression
terminal LT, LTEQ; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal GTEQ, GT; // relational_expression
terminal NOT;
terminal VARASSIGN; //type assignment
terminal ASSIGN; //assignment
terminal PLUS, MINUS, MULT, DIV;

terminal java.lang.String STRING_LITERAL;
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.String IDENTIFIER;

non terminal codigo_fuente, seccion_definicion_variables, seccion_programa,
             conjunto_variables, definicion_variables, inner_def_var, tipo_de_dato, bloque_sentencias,
             sentencia, sentencia_simple, estructura, elemento_sentencia_simple, asignacion, funcion_print,
             expresion, termino, factor, constante_numerica, expresion_booleana, termino_booleano, factor_booleano,
             operador_relacional, ciclo_while, condicion, condicional_if, condicional_else, funcion_between,
             parametros_between;

start with codigo_fuente;

codigo_fuente ::= seccion_definicion_variables seccion_programa | seccion_programa;

seccion_definicion_variables ::= DECLARE conjunto_variables ENDDECLARE ;
conjunto_variables ::= conjunto_variables definicion_variables | definicion_variables;
definicion_variables ::= LBRACK inner_def_var RBRACK {: parser.helper.loadVarsAndTypes(); :};


inner_def_var ::= IDENTIFIER:id RBRACK VARASSIGN LBRACK tipo_de_dato  {: parser.helper.varDef(id); :};
inner_def_var ::= IDENTIFIER:id COMMA inner_def_var COMMA tipo_de_dato {: parser.helper.varDef(id); :};

seccion_programa ::= BEGINPROGRAM bloque_sentencias ENDPROGRAM;

bloque_sentencias ::= bloque_sentencias sentencia | sentencia;

tipo_de_dato ::= INT {:parser.helper.typeDef(sym.INT);:}|
                 FLOAT {:parser.helper.typeDef(sym.FLOAT);:}|
                 STRING {:parser.helper.typeDef(sym.STRING);:};

sentencia ::= sentencia_simple | estructura;
sentencia_simple ::= elemento_sentencia_simple;
elemento_sentencia_simple ::= asignacion | funcion_print;
asignacion ::= IDENTIFIER ASSIGN expresion  | IDENTIFIER ASSIGN STRING_LITERAL;

expresion ::== expresion PLUS termino | termino;
expresion ::== expresion MINUS termino;

termino ::= termino MULT factor | factor;
termino ::= termino DIV factor;
factor ::= IDENTIFIER | constante_numerica | LPAREN expresion RPAREN;

constante_numerica ::= INTEGER_LITERAL | FLOATING_POINT_LITERAL;
operador_relacional ::= LT | LTEQ | EQEQ | NOTEQ | GTEQ | GT;

estructura ::= ciclo_while | condicional_if;
ciclo_while ::= WHILE condicion LBRACE bloque_sentencias RBRACE;

condicional_if ::= IF condicion LBRACE bloque_sentencias RBRACE;
condicional_if ::= IF condicion LBRACE bloque_sentencias RBRACE condicional_else;
condicional_else ::= ELSE LBRACE bloque_sentencias RBRACE;
condicion ::= expresion_booleana:expr | funcion_between  ;

expresion_booleana ::= expresion_booleana OR termino_booleano | termino_booleano;
expresion_booleana ::= expresion_booleana AND termino_booleano;

termino_booleano ::= LPAREN expresion_booleana RPAREN | LPAREN expresion operador_relacional expresion RPAREN;
termino_booleano ::= NOT termino_booleano;


funcion_print ::= PRINT STRING_LITERAL;
funcion_between ::= BETWEEN LPAREN parametros_between RPAREN;
parametros_between ::= IDENTIFIER COMMA LBRACK INTEGER_LITERAL SEMICOLON INTEGER_LITERAL RBRACK;